import {
  DocumentDirectoryPath,
  readDir,
  ReadDirResItemT,
  readFile,
} from '@dr.pogodin/react-native-fs';
import {BottomSheetScrollView} from '@gorhom/bottom-sheet';
import React, {useEffect, useState} from 'react';
import {View, Text, FlatList, TouchableOpacity, Alert} from 'react-native';
import JSONTree from 'react-native-json-tree';
import {useStyles} from 'react-native-unistyles';

import {stylesheet} from './Files.styles';

const theme = {
  base00: '#ffffff', // M√†u n·ªÅn
  base0D: '#007AFF', // M√†u key JSON
  base09: '#D35400', // M√†u value s·ªë
  base0B: '#27AE60', // M√†u value boolean
};

export const Files: React.FC = () => {
  const {styles} = useStyles(stylesheet);
  const [files, setFiles] = useState<ReadDirResItemT[]>([]); // Danh s√°ch file/th∆∞ m·ª•c
  const [currentPath, setCurrentPath] = useState<string>(DocumentDirectoryPath); // ƒê∆∞·ªùng d·∫´n hi·ªán t·∫°i
  const [selectedJson, setSelectedJson] = useState<string | null>(null);
  const [jsonData, setJsonData] = useState<any>(null);

  useEffect(() => {
    loadFiles(currentPath);
  }, [currentPath]);

  // H√†m load danh s√°ch file/th∆∞ m·ª•c
  const loadFiles = async (dirPath: string) => {
    try {
      const fileList = await readDir(dirPath);
      setFiles(fileList);
    } catch (error) {
      console.error('L·ªói ƒë·ªçc th∆∞ m·ª•c:', error);
    }
  };

  // L·∫•y th∆∞ m·ª•c cha m√† kh√¥ng c·∫ßn path.dirname()
  const getParentPath = (fullPath: string): string => {
    const parts = fullPath.split('/'); // T√°ch ƒë∆∞·ªùng d·∫´n th√†nh m·∫£ng
    parts.pop(); // Lo·∫°i b·ªè ph·∫ßn cu·ªëi (th∆∞ m·ª•c hi·ªán t·∫°i)
    return parts.join('/'); // Gh√©p l·∫°i th√†nh ƒë∆∞·ªùng d·∫´n m·ªõi
  };

  const handlePress = async (item: ReadDirResItemT) => {
    if (item.isDirectory()) {
      setCurrentPath(item.path); // N·∫øu l√† th∆∞ m·ª•c, v√†o b√™n trong
    } else {
      const fileName = item.name;
      if (fileName.endsWith('.json')) {
        try {
          const content = await readFile(item.path, 'utf8');
          setJsonData(JSON.parse(content));
          setSelectedJson(item.path);
        } catch (error) {
          console.error('L·ªói ƒë·ªçc file JSON:', error);
          Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ƒë·ªçc file JSON!');
        }
      } else {
        Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ m·ªü file n√†y.');
      }
    }
  };

  return (
    <View style={styles.container}>
      {/* N√∫t quay l·∫°i (·∫©n n·∫øu ƒëang ·ªü th∆∞ m·ª•c g·ªëc) */}
      {currentPath !== DocumentDirectoryPath && (
        <TouchableOpacity
          onPress={() => setCurrentPath(getParentPath(currentPath))}
          style={styles.buttonBack}>
          <Text>‚¨ÖÔ∏è Quay l·∫°i</Text>
        </TouchableOpacity>
      )}

      {/* Hi·ªÉn th·ªã danh s√°ch file/th∆∞ m·ª•c */}
      {/* Hi·ªÉn th·ªã JSON n·∫øu file ƒë∆∞·ª£c ch·ªçn */}
      {selectedJson ? (
        <View style={styles.jsonContainer}>
          {/* N√∫t quay l·∫°i danh s√°ch file */}
          <TouchableOpacity
            onPress={() => setSelectedJson(null)}
            style={styles.jsonBack}>
            <Text>‚¨ÖÔ∏è Quay l·∫°i danh s√°ch file</Text>
          </TouchableOpacity>

          <BottomSheetScrollView>
            {jsonData ? (
              <JSONTree data={jsonData} theme={theme} />
            ) : (
              <Text>ƒêang t·∫£i JSON...</Text>
            )}
          </BottomSheetScrollView>
        </View>
      ) : (
        <FlatList
          data={files}
          keyExtractor={item => item.path}
          renderItem={({item}) => (
            <TouchableOpacity
              onPress={() => handlePress(item)}
              style={styles.item}>
              <Text>
                {item.isDirectory() ? 'üìÅ ' : 'üìÑ '} {item.name}
              </Text>
            </TouchableOpacity>
          )}
        />
      )}
    </View>
  );
};
